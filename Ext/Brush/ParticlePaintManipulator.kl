

/*
 *  Copyright 2010-2015 Fabric Software Inc. All rights reserved.
 */

require Singletons;
require InlineDrawing;



/**
\versionadded 1.12.0

A struct representing a single point in a paint stroke path. This structure is use
to gather data from the geometry being painted. Used in the 'collectPointsProduce2' and
'collectPointsReduce2' MapReduce call.
\note The :kl-ref:`ParticlePaintManipulator` generates an array of these structs
during painting.
\seealso ParticlePaintManipulator, SurfaceAttributePaintManipulator, SurfaceSculptManipulator
*/
object ParticlePaintManipulator_StrokePoint {
  InlineInstance instance;
  GeometryLocation location;
  Vec3 objectSpacePoint;
  Vec3 worldSpacePoint;
};

function ParticlePaintManipulator_StrokePoint(InlineInstance instance, GeometryLocation location, Vec3 objectSpacePoint, Vec3 worldSpacePoint){
  this.instance = instance;
  this.location = location;
  this.objectSpacePoint = objectSpacePoint;
  this.worldSpacePoint = worldSpacePoint;
}

/**
\versionadded 1.12.0

 A collection of points gathered during a single event. The collected points are then
 passed to the onPaint method implemented in the sepcliazed PaintManipulator.
\seealso ParticlePaintManipulator\
*/
struct ParticlePaintManipulator_PointCollection {
  /// the points being painted.
  Points points;
  /// The ray generated from the mouse event.
  Ray ray;
  /// point ids of the points inside the paint brush during this update.
  Integer pointIds[];
  /// the distances of the points from the center of the brush. 
  Scalar distances[];
  /// weights computed based on a cosine falloff of the points, multiplied by the brush strength.
  Scalar weights[];
};

/**
\versionadded 1.12.0

An interface for paint manipulator that defines the virtual methods
that can be overridden in specialized painting tools. 
\note: when the 'virtual' keyword is introduced into KL, we can eliminate this interface and simply decorate the methods in ParticlePaintManipulator with the virtual keyword.
\seealso ParticlePaintManipulator, SurfaceAttributePaintManipulator, SurfaceSculptManipulator
*/
interface IParticlePaintManipulator {

  /// Invoked by the ParticlePaintManipulator when the paint stroke begins.
  /// The event passed in is the mouse down event.  
  onStrokeBegin!(io MouseEvent mouseEvent);
  
  /// Invoked by the ParticlePaintManipulator when the paint stroke ends.
  /// The event passed in is the mouse up event.  
  onStrokeEnd!(io MouseEvent mouseEvent);

  /// Invoked by the ParticlePaintManipulator during painting for each mouse move event.
  /// the collectedPoints struct contains the points, distances and weights
  /// of the points in the geometry that are within the volume of the paint brush.
  onPaint!(io MouseEvent mouseEvent, ParticlePaintManipulator_PointCollection collectedPoints);
};


/**
\versionadded 1.12.0

The :kl-ref:`ParticlePaintManipulator` provides base services for a wide range 
of paint based manipulators. You can use the ParticlePaintManipulator as the basis 
for your own custom paint manipulators.

The ParticlePaintManipulator provides the following services. 

 - It manages an array of target geometries. 
 - It manages the processing of events to generate a paint stroke. 
 - It raycasts the target geometries and collects the points within the brush volume into a data structure called ParticlePaintManipulator_PointCollection
 - It invokes the virtual methods defined in IParticlePaintManipulator to enable derived manipulators to apply the paint data to the scene.

The ParticlePaintManipulator supports painting tools that can paint multiple geometries in a single point stroke.

\rst

Usage
=====
 - A Click and drag with a mouse button generates a paint stroke
 - At the start of the paint stroke the 'onStrokeBegin' function to be invoked
 - Each update of the paint stroke causes 'onPaint' function to be invoked
 - At the end of the paint stroke the 'onStrokeEnd' function to be invoked
 - The mouse wheel can be used to resize the paint brush, except on platforms that do not support the mouse wheel.
 - The 'Ctrl' modifier key can be held during a mouse drag to resize the brush on these platforms.
\endrst

Derived paint manipulators overide the 'onStrokeBegin', 'onPaint' and 'onStrokeEnd' methods to compute a change in the scene. 

\seealso Manipulator, IParticlePaintManipulator, SurfaceAttributePaintManipulator, SurfaceSculptManipulator
*/
object ParticlePaintManipulator : Manipulator, IParticlePaintManipulator {

  InlineInstance targetGeometries[];


  /// The stroke points making up the current paint stroke.
  ParticlePaintManipulator_StrokePoint strokePath[];

  SurfacePaintManipulator_State state;

  Scalar brushSize;
  Scalar brushStrength;
  Scalar brushScaleSpeed;
  Scalar mouseDownBrushSize;
  Vec2 mouseDownScreenPos;

  InlineMaterial paintBrushMaterial;
  InlineInstance paintBrush;

};

/// Initialize the default values of the ParticlePaintManipulator
/// \note Should be called by any manipulators inheriting from 
/// :kl-ref:`ParticlePaintManipulator` within thier constructors.
function ParticlePaintManipulator.init!(){
  this.brushSize = 0.033;
  this.brushStrength = 1.0;
  this.brushScaleSpeed = 1.0;

  // this is a singleton
  InlineDrawing drawing = OGLInlineDrawing_GetInstance();

  InlineShader hudShader = drawing.registerShader(OGLHUDShader('OGLHUDShader'));

  this.paintBrushMaterial = hudShader.getOrCreateMaterial("ParticlePaintManipulator_PaintBrush");
  this.paintBrushMaterial.setUniform('u_color', Color(1.0, 0.0, 0.0));

  Lines lines();
  lines.addCircle(Xfo(Quat(Vec3(1,0,0), HALF_PI)), 1.0, 24);

  InlineShape shape = InlineLinesShape('ParticlePaintManipulator_PaintBrush', lines);
  drawing.registerShape(shape);

  InlineTransform transform = StaticInlineTransform('ParticlePaintManipulator_PaintBrush_Transform', Xfo());
  drawing.getRoot().addChild(transform);

  this.paintBrush = InlineInstance('ParticlePaintManipulator', transform, shape);

}

/// When the manipulator is enabled, this callback function is invoked. 
function ParticlePaintManipulator.onEnable!(){
  // Enable the rendering of the brush by adding it to the material.
  if(!this.paintBrush.hasMaterial(this.paintBrushMaterial))
    this.paintBrush.addMaterial(this.paintBrushMaterial);
}

/// When the manipulator is disabled, this callback function is invoked. 
function ParticlePaintManipulator.onDisable!(){
  // Disable the rendering of the brush by removing it from the material.
  if(this.paintBrush.hasMaterial(this.paintBrushMaterial))
    this.paintBrush.removeMaterial(this.paintBrushMaterial);
}

/// Returns true if the target geometry has already been added to the paint manipulator.
function Boolean ParticlePaintManipulator.hasTargetGeometry!(InlineInstance instance){
  Ref<InlineInstance> ref_instance = instance; 
  for(Integer i=0; i<this.targetGeometries.size; i++){
    Ref<InlineInstance> cur_instance = this.targetGeometries[i]; 
    if(cur_instance === ref_instance)
      return true;
  }
  return false;
}

/// Add a new target geometry to the paint manipulator.
function ParticlePaintManipulator.addTargetGeometry!(InlineInstance instance){

  InlineShape shape = instance.getShape();
  Points points = shape.getGeometry();
  if(points == null){
    report("WARNING: Geometry is not a Points:" + instance.getName() );
    return;
  }
  SpatialQueryable queryable = shape.getGeometry();
  if(queryable == null){
    report("WARNING: Geometry cannot be raycast.");
    return;
  }
  if(!this.hasTargetGeometry(instance))
    this.targetGeometries.push(instance);
}


/// Updates the brush sceenspace transform based on the given mouse event.
function ParticlePaintManipulator.updateBrush!(io Event event, Vec2 mousePos){
  Vec2 viewportDim = event.getViewport().getDimensions();

  Scalar viewportAspectRatio = viewportDim.x / viewportDim.y;
  Xfo brushXfo(
    Vec3(
    ((mousePos.x / viewportDim.x) - 0.5) * 2.0, 
    ((mousePos.y / viewportDim.y) - 0.5) * -2.0, 
    0), 
    Quat(), 
    Vec3(this.brushSize / viewportAspectRatio, this.brushSize, this.brushSize)
  );
  this.paintBrush.getTransform().setLocalXfo(0, brushXfo);
}

/// Raycasts a single inline instance, generating a :kl-ref:`ParticlePaintManipulator_StrokePoint`
/// if the geometry is the closest target geometry hit by the ray.
/// \internal
function ParticlePaintManipulator.raycastInstance!(Ray ray, InlineInstance instance, io Scalar distance, io ParticlePaintManipulator_StrokePoint strokePoint){

  GeometryLocation locations[] = instance.raycast(ray, true, false, 0.0, SCALAR_INFINITE);
  if(locations.size() == 1){
    Xfo xfo = instance.getTransform().getGlobalXfo(0);
    SpatialQueryable queryable = instance.getShape().getGeometry();
    Vec3 objectSpacePoint = queryable.getPositionAtLocation(locations[0]);
    Vec3 worldSpacePoint = xfo.transformVector(objectSpacePoint);
    Scalar dist = (worldSpacePoint - ray.start).length();
    if(dist < distance){
      strokePoint = ParticlePaintManipulator_StrokePoint(instance, locations[0], objectSpacePoint, worldSpacePoint);
      distance = dist;
    }
  }
}

/// Raycasts all target geometries, passing the stroke point for the closest to 
/// :kl-ref:`ParticlePaintManipulator.collectGeometryPointsFromStrokePoint` for processing.
/// \internal
function Boolean ParticlePaintManipulator.raycastTargetGeometries!(io MouseEvent mouseEvent){

  Ray ray = mouseEvent.getViewport().calcRayFromScreenPos(mouseEvent.pos);
  Scalar dist = BIGSCALAR_POSITIVE;

  ParticlePaintManipulator_StrokePoint strokePoint = null;
  for(Integer i=0; i< this.targetGeometries.size(); i++){
    this.raycastInstance(ray, this.targetGeometries[i], dist, strokePoint);
  }

  if(strokePoint != null){
    this.strokePath.push(strokePoint);
    this.collectGeometryPointsFromStrokePoint(mouseEvent, strokePoint, ray, mouseEvent.getViewport().getCamera().getFovY());
    return true;
  }
  return false;
}

//////////////////////////////////////
//

/// A struct for collecting points during surface painting.
/// \internal
struct CollectParticleSharedData {
  Points points;
  Ref<Vec3Attribute> srcPosAttr;
  Vec3 brushPos;
  Scalar brushSize;
  Scalar brushStrength;
  ParticlePaintManipulator_StrokePoint strokePath[];
};

/// A struct for collecting points during surface painting.
/// \internal
struct CollectPointsMapOutput {
  Boolean collected;
  Integer pointIndex;
  Scalar distance;
  Scalar weight;
};


/// An operator for collecting points during surface painting.
/// \internal
operator collectPointsProduce2(io CollectPointsMapOutput result, Index index, Size count, CollectParticleSharedData sharedData) {
  Vec3 pos = sharedData.points.getPosition(index); 
  if(sharedData.strokePath.size==1){
    Scalar dist = pos.distanceTo(sharedData.strokePath[0].objectSpacePoint);
    if(dist < sharedData.brushSize){
      result.collected = true;
      result.pointIndex = index;
      result.distance = dist;
      result.weight = ((cos(PI * (dist / sharedData.brushSize)) * 0.5) + 0.5) * sharedData.brushStrength;
      return;
    }
  }
  else {
    Vec3 p1 = sharedData.strokePath[sharedData.strokePath.size-2].objectSpacePoint;
    Vec3 p2 = sharedData.strokePath[sharedData.strokePath.size-1].objectSpacePoint;
    Scalar dist = distFromPointToSegment(pos, p1, p2);
    if(dist < sharedData.brushSize){
      result.collected = true;
      result.pointIndex = index;
      result.distance = dist;
      result.weight = ((cos(PI * (dist / sharedData.brushSize)) * 0.5) + 0.5) * sharedData.brushStrength;
      return;
    }
  }
  result.collected = false;
}

/// An operator for collecting points during surface painting.
/// \internal
operator collectPointsReduce2(CollectPointsMapOutput input, io ParticlePaintManipulator_PointCollection output, Index index, Size count) {
  if(input.collected){
    output.pointIds.push(input.pointIndex);
    output.distances.push(input.distance);
    output.weights.push(input.weight);
  }
}

/// Collects the points in the Points painted in the most recent stroke 
/// point. These collected points are then sent to the virtual function 
/// :kl-ref:`IParticlePaintManipulator.onPaint` for processing.
/// \internal
function ParticlePaintManipulator.collectGeometryPointsFromStrokePoint!(io MouseEvent mouseEvent, ParticlePaintManipulator_StrokePoint strokePoint, Ray ray, Scalar fovY){

  InlineInstance instance = this.strokePath[this.strokePath.size-1].instance;
  InlineTransform transform = instance.getTransform();
  InlineShape shape = instance.getShape();
  Points points = shape.getGeometry();
  if(!points){
    return;
  }
  Scalar dist = strokePoint.worldSpacePoint.distanceTo(ray.start);

  CollectParticleSharedData collectPointsSharedData;
  collectPointsSharedData.points = points;
  collectPointsSharedData.brushSize = 2.0 * this.brushSize * dist * fovY;
  collectPointsSharedData.brushStrength = this.brushStrength;
  collectPointsSharedData.strokePath = this.strokePath;

  ValueProducer<ParticlePaintManipulator_PointCollection> reducer = createReduce( 
    createArrayGenerator(
      createConstValue( points.pointCount() ),
      collectPointsProduce2,
      createConstValue( collectPointsSharedData )
    ),
    collectPointsReduce2
  );
  ParticlePaintManipulator_PointCollection collectedPoints = reducer.produce();
  
  collectedPoints.points = points;
  collectedPoints.ray = ray;

  // Cast this to the IParticlePaintManipulator so that we can invoke the virtual method
  // Note: when the 'virtual' keyword is introduced into KL, we can eliminate this step.
  Ref<IParticlePaintManipulator> ipainter = this;
  ipainter.onPaint( mouseEvent, collectedPoints);
}

/// The event handler function for the ParticlePaintManipulator
/// \param event The event propagated from the host DCC application 
function ParticlePaintManipulator.onEvent!(io Event event){
  // Cast this to the IParticlePaintManipulator so that we can invoke the virtual method
  // Note: when the 'virtual' keyword is introduced into KL, we can eliminate this step.
  Ref<IParticlePaintManipulator> ipainter = this;

  if(event.eventType() == Event_MouseButtonPress){
    MouseEvent mouseEvent = event;
    switch(this.state){
    case SurfacePaintManipulator_State_Active:
      // Avoid disabling camera manipulation in Maya
      // Note: testing the host name is casing a crash that doesn't make sense.
      if(mouseEvent.host.hostName == "Maya" && (mouseEvent.modifiers & ModiferKey_Alt) != 0){
        // While the camera manipulation is occuring, hide the
        // paint brush and do not accept the events.
        this.state = SurfacePaintManipulator_State_Suspended;
        this.onDisable();
      }
      else if((mouseEvent.modifiers & ModiferKey_Ctrl) != 0){
        // While the camera manipulation is occuring, hide the
        // paint brush and do not accept the events.
        this.state = SurfacePaintManipulator_State_ResizingBrush;
        this.mouseDownBrushSize = this.brushSize;
        this.mouseDownScreenPos = mouseEvent.pos;
        event.accept();
      }
      else{
        this.strokePath.resize(0);
        ipainter.onStrokeBegin(mouseEvent);
        this.state = SurfacePaintManipulator_State_Painting;
        if(this.raycastTargetGeometries(mouseEvent)){
          event.getHost().requestRedraw();
        }
        event.accept();
      }
      break;
    }
  }
  else if(event.eventType() == Event_MouseMove){
    // suspend event handling while manipulating the camera. 
    MouseEvent mouseEvent = event;
    switch(this.state){
      case SurfacePaintManipulator_State_Suspended: return;
      case SurfacePaintManipulator_State_Active:
        this.updateBrush(event, mouseEvent.pos);
        event.getHost().requestRedraw();
        event.accept();
        break;
      case SurfacePaintManipulator_State_Painting:
        // On drag
        this.updateBrush(event, mouseEvent.pos);
        this.raycastTargetGeometries(mouseEvent);
        event.getHost().requestRedraw();
        event.accept();
        break;
      case SurfacePaintManipulator_State_ResizingBrush:
        Scalar drag = this.mouseDownScreenPos.x - mouseEvent.pos.x;
        this.brushSize = this.mouseDownBrushSize + drag * Scalar(0.0001) * this.brushScaleSpeed;
        if(this.brushSize < 0.001)
          this.brushSize = 0.001;
        this.updateBrush(event, mouseEvent.pos);
        event.getHost().requestRedraw();
        event.accept();
        break;
    }
  }
  else if(event.eventType() == Event_MouseButtonRelease){
    MouseEvent mouseEvent = event;
    switch(this.state){
    case SurfacePaintManipulator_State_Suspended:
      // reenable event handling now that camera manipulation is over. 
      this.state = SurfacePaintManipulator_State_Active;
      this.onEnable();
      event.getHost().requestRedraw();
      break;
    case SurfacePaintManipulator_State_Active:
      event.accept();
      break;
    case SurfacePaintManipulator_State_Painting:
      // On release, end the stroke(which should cause an undo to be generated in the callback)
      this.state = SurfacePaintManipulator_State_Active;
      ipainter.onStrokeEnd(mouseEvent);
      event.getHost().requestRedraw();
      event.accept();
      break;
    case SurfacePaintManipulator_State_ResizingBrush:
      this.state = SurfacePaintManipulator_State_Active;
      event.accept();
      break;
    }
  }
  else if(event.eventType() == Event_Wheel){
    // Use the mouse wheel to reize the brush. 
    if(this.state != SurfacePaintManipulator_State_Suspended){
      MouseWheelEvent mouseWheelEvent = event;
      this.brushSize = this.brushSize + mouseWheelEvent.delta * Scalar(0.0001) * this.brushScaleSpeed;
      if(this.brushSize < 0.001)
        this.brushSize = 0.001;
      this.updateBrush(event, mouseWheelEvent.pos);
      event.getHost().requestRedraw();
      event.accept();
    }
  }
  else if(event.eventType() == Event_Leave){
    if(this.state != SurfacePaintManipulator_State_Suspended){
      // When the mouse leaves the viewport, hide the brush. 
      this.onDisable();
      event.getHost().requestRedraw();
    }
  }
  else if(event.eventType() == Event_Enter){
    if(this.state != SurfacePaintManipulator_State_Suspended){
      // When the mouse enters the viewport, show the brush. 
      this.onEnable();
      event.getHost().requestRedraw();
    }
  }
}

/// Virtual function overridden in manipulators inheriting from ParticlePaintManipulator
function ParticlePaintManipulator.onStrokeBegin!(io MouseEvent mouseEvent){
  setError("Should be defined in an object inheriting from ParticlePaintManipulator");
}

/// Virtual function overridden in manipulators inheriting from ParticlePaintManipulator
function ParticlePaintManipulator.onStrokeEnd!(io MouseEvent mouseEvent){
  setError("Should be defined in an object inheriting from ParticlePaintManipulator");
}

/// Virtual function overridden in manipulators inheriting from ParticlePaintManipulator
function ParticlePaintManipulator.onPaint!(io MouseEvent mouseEvent, ParticlePaintManipulator_PointCollection collectedPoints){
  setError("Should be defined in an object inheriting from ParticlePaintManipulator");
}
