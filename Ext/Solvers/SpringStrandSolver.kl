/*
*/

require Math;
require Characters;
require FABRIK;
require ParticleSystem;

object SpringStrand: ParticleSystem, IFABRIKSolver {
    String        name;
    Boolean       ready;
    Skeleton      skeleton;        // sleketon
    DrawingHandle handle;
    Index         subBaseIndex;    // the index sub-base bone on skeleton
    Index         subBaseIndexInternal;  // internally use

    Index         numberOfStrands;
    Index         numberOfVertices;
    Index         rootNodeIndices[];
    Index         innerIndices[][];

    Bone          bones[][];         // the bones
    Xfo           boneReferenceLocalPose[][];         // the bones
    Xfo           xfos[][];          // the xfo of bone
    Index         nodeIndices[][];   // the bone index on the skeleton
    Scalar        chainLengths[];
    Integer       max_iteration;   // max iteration

    Mat44         rootControllers[];

    //////////////////////////////////////
    Vec3          positionPrev[][];

    Index         effectorIndex;
    Index         effectorCount;

    ////////////////////////////////////////
    // derived from ParticleSystem
    //Index         integrateMethod;
    //ParticleState    ps[];
    //Scalar        masses[];

    ////////////////////////////////////////
    // simulation params
    //Scalar        kineticFriction;
    //Scalar        staticFriction;

    Vec3          basePose[];
    Vec3          referenceLocalPosition[];
};



///////////////////////////////////////////////////////////////////////////////////////////////////
function SpringStrand( Ref<Skeleton> skeleton, io DrawingHandle handle, in String boneNames[][] ){

    this.ctor();

    this.xfos.convertToSVM();


    this.ready = false;
    this.skeleton = skeleton;
    this.handle = handle;
    //this.precision = 0.005f;
    this.max_iteration = 150;

    //this.num_bones = boneNames.size();
    this.numberOfStrands = boneNames.size;
    this.bones.resize( boneNames.size );
    this.boneReferenceLocalPose.resize( boneNames.size );
    this.xfos.resize( boneNames.size );
    this.chainLengths.resize( boneNames.size );
    this.nodeIndices.resize( boneNames.size );
    this.rootNodeIndices.resize( boneNames.size );
    this.positionPrev.resize( boneNames.size );
    this.effectorIndex = 0;
    this.name = this.type() +":" + this.skeleton.name +":" + boneNames[boneNames.size-1];
    this.numberOfVertices = 0;
    this.innerIndices.resize( boneNames.size );
    this.referenceLocalPosition.resize( 0 );

    // velocity verlet
    //this.masses.resize( this.numberOfVertices );
    Vec3 tmpPos[];
    Vec3 tmpMass[];

    // basic verlet
    for (Index j=0; j < boneNames.size; j++ ){
        this.rootNodeIndices[j] = skeleton.findBone( boneNames[j][0] );

        for ( Index i=0; i < boneNames[j].size; i++) {
            this.innerIndices[j].resize( boneNames[j].size );
            this.innerIndices[j][i] = this.numberOfVertices;
            this.numberOfVertices++;
            Index boneindex = skeleton.findBone( boneNames[j][i] );
            this.nodeIndices[ j ].push( boneindex );
            Bone bone = skeleton.getBone( boneindex );
            this.xfos[j].push( bone.referencePose );
            bone.length = 0.0f;  // must culculate later
            bone.name = "FABRIKSolver:bones-" + skeleton.getBone( boneindex ).name;
            //report( "add bone["+j+"]["+i+"]: " + bone.name + "   " + bone.length );
            this.positionPrev[j].push( bone.referencePose.tr );
            if ( i != 0 ){
                bone.parentIndex = this.nodeIndices[j][ i-1 ];
            } else {
                bone.parentIndex = 0;
            }

            this.bones[j].push( bone );
            this.boneReferenceLocalPose[j].push( bone.referencePose );

            this.addPoint( bone.referencePose.tr ); 
            tmpPos.push( bone.referencePose.tr );
        }
    }

    this.referenceLocalPosition.resize( tmpPos.size );
    for (Index j=0; j < boneNames.size; j++ ){
        // calculate bone length and total chain length
        this.chainLengths[j] = 0.0f;

        for (Index i=1; i < this.bones[j].size; i++) {
            this.referenceLocalPosition[this.innerIndices[j][i]] = 
                    this.bones[j][i-1].referencePose.tr - this.bones[j][i].referencePose.tr; 
        }

        for (Index i=0; i < this.bones[j].size - 1; i++) {

            //Xfo tmp_parent = this.bones[j][i].referencePose;

            Scalar length = abs( ( this.xfos[j][i+1].tr - this.xfos[j][i].tr).length() );
            if ( isZero( length )) {
                setError( "zero length bone found" );
            }

            //report( "bone length ["+i+"]: " + length);
            this.bones[j][i].length = length;
            this.chainLengths[j] += length;
        }
    }

    this.basePose.resize( tmpPos.size );
    this.setInitialPosition( tmpPos );
    this.addConstraints();

    Index count =0;
    for (Index j=0; j < boneNames.size; j++ ){

        for ( Index i=0; i < boneNames[j].size; i++) {
            // FIXME: for dev
            this.masses.values[count] = (20.0f - i*2.5f) * 0.03f;
            this.masses.values[count] = 0.5f;
            count++;
        }
    }

    this.postConstruct();
}

////////////////////////////////////////////////////////////////////////////////////////
///
function SpringStrand.calculateBasePose!( in Mat44 rootControllers[] ){
    for ( Index i=0; i < this.numberOfStrands; i++ ) {
        this.basePose[ this.innerIndices[i][0] ] = rootControllers[i].translation();

        for( Index j=1; j < this.bones[i].size; j++ ){
            this.basePose[ this.innerIndices[i][j] ] = (
                                this.basePose[ this.innerIndices[i][j-1] ] +
                                this.referenceLocalPosition[this.innerIndices[i][j]]
                            );
        }
    }
}
////////////////////////////////////////////////////////////////////////////////////////
/// implement interface ISpringStrand
function SpringStrand.Solve!( io IPose pose, in Mat44 rootControllers[] ){

    // FIXME: for dev
    if ( this.forces.size == 0 ){
        this.forces.push( Gravity( this.env ) );
        this.forces.push( Wind( this.env, Vec3( 0, 0, -1), 0.5 ) );
        // this.forces.push( Spring( this.env, this.basePose, this ) );
        // this.forces.push( DragResilienceForce( this.env, this ) );
    }

    this.calculateBasePose( rootControllers );

    for ( Index i=0; i < this.numberOfStrands; i++ ) {
        pose.setBoneXfo( this.rootNodeIndices[ i ], Xfo( rootControllers[i] ));
    }

    if ( this.env.isStartFrame() ){
        this.ResetToReferencePose();

    } else {
        if ( this.integrateMethod ==  0 ){
            this.solveBasicVerlet( this.env.getDeltaTime() );
        } else if ( this.integrateMethod == 1 ){
            this.solveVelocityVerlet( this.env.getDeltaTime() );
        }

        this.pinnedOnController( rootControllers );

        for (Index i=0; i < 2; i++){
            this.satisfyInternalConstraints();
            for (Index j=0; j < this.collisionMeshs.size; j++){
                this.UpdateExternalConstraints( this.collisionMeshs[j], 0.05, 3 );
            }
        }

        this.recalcurateVelocity( this.env.getDeltaTime() );
    }

    for ( Index i=0; i < this.numberOfStrands; i++ ) {
        for ( Index j=1; j < this.positionPrev[i].size; j++){
            this.xfos[i][j] = Xfo( this.getPosition( this.innerIndices[i][j] ) );
            pose.setBoneXfo( this.nodeIndices[i][j], this.xfos[i][j] );
        }
    }

    for ( Index i=0; i < this.numberOfStrands; i++ ) {
        pose.setBoneXfo( this.rootNodeIndices[ i ], Xfo( rootControllers[i] ));
    }

    //this.draw();
}

function SpringStrand.Solve!( io IPose pose, in Vec3 effectorPosition ){

}


function SpringStrand.addConstraints!(){
    // column
    for (Index j=0; j < this.numberOfStrands; j++ ){
        for (Index i=1; i < this.bones[j].size; i++) {
            this.addConstraint(
                this.innerIndices[j][i],
                ParticleConstraint( this.innerIndices[j][i-1], this.bones[j][i-1].length ));
        }
    }

    /* row
    for (Index j=0; j < this.numberOfStrands - 1; j++ ){
        for (Index i=1; i < this.bones[j].size; i++) {
            Scalar dist = (this.ps[ this.innerIndices[j+1][i] ].position - this.ps[ this.innerIndices[j][i] ].position ).length;
            this.addConstraint(
                this.innerIndices[j][i],
                ParticleConstraint( this.innerIndices[j+1][i], dist ));
        }
    }
    // 
        for (Index i=1; i < this.bones[0].size; i++) {
            Scalar dist = (this.ps[ this.innerIndices[0][i] ].position - this.ps[ this.innerIndices[this.bones.size-1][i] ].position ).length;
            this.addConstraint(
                this.innerIndices[this.bones.size-1][i],
                ParticleConstraint( this.innerIndices[0][i], dist ));
        }
    */
}


function SpringStrand.satisfyInternalConstraints!(){
    SpringStrand_satisfyInternalConstraints<<< this.constrainRefIndex.size@GPU_ENABLE >>>(
            this.simulatedPos, this.constrainRefIndex, this.constrainDistance, this.cutOffForceDistance );
}

operator SpringStrand_satisfyInternalConstraints<<<index>>>(
                                                io Vec3 positions[],
                                                in Index refs[][],
                                                in Float32 dist[][],
                                                in Float32 cutoff,
                                                ){
    for( Index i=0; i < refs[index].size; i++ ){
        Vec3 dv = positions[index] - positions[ refs[index][i] ];
        Float32 d1 = dv.length;

        if ( d1 < cutoff ){
            return;
        }

        Float32 d2 = 0.0f;
        if( !isZero( d1 ) ){
            d2 = 0.5 * (d1 - dist[index][i]) / d1;
        }

        Vec3 dp = dv * d2;
        positions[ index ]           -= dp;
        positions[ refs[index][i] ] += dp;
        //this.velocity.values[i] -= dp;
        //this.velocity.values[ this.constraints[i][j].refIndex ] += dp;
    }
}


function SpringStrand.pinnedOnController!( in Mat44 ctrl[] ){
    if( GPU_ENABLE ){
        Vec3 tmp[];
        Index ids[];
        tmp.convertToSVM();
        ids.convertToSVM();
        for ( Index i=0; i < this.numberOfStrands; i++ ) {
            tmp.push( ctrl[i].translation() );
            ids.push( this.innerIndices[i][0] );
        }
        SpringStrand_pinnedOnController<<<this.numberOfStrands@true>>>(
                                this.simulatedPos, tmp, ids );

    } else {
        for ( Index i=0; i < this.numberOfStrands; i++ ) {
            this.simulatedPos[ this.innerIndices[i][0] ] = ctrl[i].translation();
        }
    }
}

operator SpringStrand_pinnedOnController<<<index>>>( io Vec3 res[], in Vec3 ctrl[], in Index indices[] ){
    res[indices[index]] = ctrl[index];
}

/// for shortcut
inline function Xfo getReferenceLocalPose( io Skeleton skeleton, Index index ){
    return skeleton.getReferenceLocalPose( index );
}


function SpringStrand.SetEffectorIndex!( io Index id ){
    this.effectorIndex = id;
}

function Index SpringStrand.GetEffectorCount(){
    return this.effectorCount;
}



function SpringStrand.UpdatePose?( io IPose pose ){
}



function Index SpringStrand.GetRootNodeIndex(){
    return this.nodeIndices[0][0];
}


function SpringStrand.SetSubBase!( in String nodeName ){
}

function Index SpringStrand.GetSubBaseIndex(){
    return this.subBaseIndex;
}

function Xfo SpringStrand.GetSubBaseXfo(){
    return this.xfos[0][ this.subBaseIndexInternal ];
}

function SpringStrand.OffsetByCentroid!( io IPose pose, Xfo xfo ){
}

//function SpringStrand.ResetToReferencePose!() {
//}

function String SpringStrand.GetName() {
    return this.name;
}

function Boolean SpringStrand.IsReady(){
    return this.ready;
}

function SpringStrand.Finalize!(){
    this.ready = true;
}


function SpringStrand.DrawSolver!() {
}

function String SpringStrand.getInlineNodeName(){
    return "SpringStrandSolverInline_";
}

// Generates a set of inline shapes nested under the provided rootTransform. 
function SpringStrand.draw!(){
    GeometryAttributes  attrs = this.getAttributes();
    Ref<ColorAttribute>  vCol = attrs.getOrCreateColorAttribute( "vertexColors" );
    Ref<ScalarAttribute> fric = attrs.getOrCreateScalarAttribute( "friction" );

    // update vertex color
    for( Index i=0; i < this.size; i++ ){
        /*
        if( this.dynamicFriction.values[i] != 1.0 ){
            vCol.values[ i ] = Color( fric.values[i], 1.0, 1.0 );
        } else {
            vCol.values[ i ] = Color( fric.values[i], 0.1, 0.1 );
        }
        */
        vCol.values[ i ] = Color( 0.0, 1.0, 1.0 );
    }
    vCol.incrementVersion();

    // prepare inline drawing
    InlineDrawing   drawing   = this.handle.getDrawing();
    InlineTransform transform = this.handle.getRootTransform().getChild( this.getInlineNodeName() );
    InlineShader    shader    = drawing.registerShader(OGLFlatVertexColorShader());
    InlineMaterial  mat       = shader.getOrCreateMaterial("vertexColors");

    /* TODO: switch to use fabric's drawer
    // initialize
    if( transform == null){
        transform = StaticInlineTransform( this.getInlineNodeName(), Xfo() );
        this.handle.getRootTransform().addChild( transform );
        InlineShape shape = drawing.registerShape( InlinePointsShape( this.getInlineNodeName(), this ));
        InlineInstance instance =  mat.addInstance( InlineInstance(
                        this.getInlineNodeName(), transform, shape, mat));
    }
    */

    this.incrementPositionsVersion();
}
