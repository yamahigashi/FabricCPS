/*
*/

require Math;
require Characters;
require Kraken;
require ParticleSystem;
require FABRIK;



object SpringStrandSolver: ParticleSystem, IKrakenSolver {
    Boolean       drawDebug;
    DrawingHandle handle;

    String        name;
    Boolean       ready;

    Index         numberOfStrands;
    Index         numberOfEdges;
    Index         numberOfVertices;

    Index         rootNodeIndices[];
    Index         innerIndices[][];

    Xfo           xfos[][];          // the xfo of bone
    Float32       chainLengths[][];
    Integer       max_iteration;   // max iteration

    ////////////////////////////////////////
    // simulation params
    //Scalar        kineticFriction;
    //Scalar        staticFriction;
    //Scalar        ikblend;


    Vec3          basePose[];
    //DistanceConstraint distanceConstraints[];
};



///////////////////////////////////////////////////////////////////////////////////////////////////
// Default Constructor
inline SpringStrandSolver() {
  this.drawDebug = false;
  this.handle = DrawingHandle();
}

function SpringStrandSolver.setDebug!(in Boolean active) {
    this.drawDebug = active;
    //this.handle.setActive(active); //FIXME this cause crash....
}

function SpringStrandSolver.initialize!(
                                in Mat44 fkcontrols[],
                                in Mat44 ikgoal[]
                            ){

    this.ctor();

    //this.xfos.convertToSVM();
    this.ready = false;
    this.max_iteration = 150;

    this.numberOfStrands = ikgoal.size();
    this.numberOfEdges    = fkcontrols.size() / this.numberOfStrands;
    this.numberOfVertices = this.numberOfEdges + 1;  // contains strand end tip's vert

    this.xfos.resize( this.numberOfStrands );
    this.rootNodeIndices.resize( this.numberOfStrands );
    this.name = this.type();  // +":" + boneNames[this.numberOfStrands-1];
    this.innerIndices.resize( this.numberOfStrands );
    this.chainLengths.resize( this.numberOfStrands );

    //this.masses.resize( this.numberOfVertices );
    Vec3 tmpPos[];
    Vec3 tmpMass[];

    // initialize series and parallel array, 
    Index count=0;
    for (Index j=0; j < this.numberOfStrands; j++ ){

        this.rootNodeIndices[j] = j * this.numberOfStrands;
        this.innerIndices[j].resize( this.numberOfVertices );

        for ( Index i=0; i < this.numberOfVertices; i++) {

            this.innerIndices[j][i] = count;

            Vec3 tr;
            if( i < this.numberOfVertices -1 ){
                tr = fkcontrols[count-j].translation();
            } else {
                tr = ikgoal[j].translation();
            }

            this.xfos[j].push( tr );
            this.addPoint( tr ); 
            tmpPos.push( tr );

            count++;
        }
    }

    // calculate edge length
    for (Index j=0; j < this.numberOfStrands; j++ ){

        this.chainLengths[j].resize( this.numberOfEdges );

        for (Index i=0; i < this.numberOfEdges; i++) {

            Scalar length = abs( (this.xfos[j][i+1].tr - this.xfos[j][i].tr).length() );
            if ( isZero( length )) {
                setError( "zero length bone found" );
            }

            this.chainLengths[j][i] = length;
        }
    }

    this.basePose.resize( tmpPos.size() );
    this.setInitialPosition( tmpPos );
    this.addConstraints();

    count =0;
    for (Index j=0; j < ikgoal.size(); j++ ){

        this.masses.values[count] = 0.0f;  // root fixed
        count++;
        for ( Index i=1; i < this.numberOfVertices; i++) {
            // FIXME: for dev
            Float32 segRatio = (i+1.0f) / this.numberOfVertices;
            this.masses.values[count] = pow( (1.0f - segRatio), 1.0f ) * 0.75 + 1.0f;
            //this.masses.values[count] = 0.5;
            report( "masses: " + pow( (1.0f - segRatio), 1.0f ) * 0.75 + 1.0f );
            count++;
        }
    }

    this.parent.UpdateMethod( 1 );
    this.postConstruct();
    this.ready = true;
}

function KrakenSolverArg[] SpringStrandSolver.getArguments(){

    KrakenSolverArg args[];
    args.push(KrakenSolverArg('drawDebug',        'in',  'Boolean'));
    args.push(KrakenSolverArg('rigScale',         'in',  'Scalar'));

    args.push(KrakenSolverArg('time',             'in',  'Scalar'));
    args.push(KrakenSolverArg('ikblend',          'in',  'Scalar'));
    //args.push(KrakenSolverArg('simulationWeight', 'in',  'Scalar'));
    args.push(KrakenSolverArg('chainBase',        'in',  'Mat44[]'));
    args.push(KrakenSolverArg('ikgoal',           'in',  'Mat44[]'));
    args.push(KrakenSolverArg('fkcontrols',       'in',  'Mat44[]'));
    args.push(KrakenSolverArg('tipBoneLen',       'in',  'Scalar'));

    args.push(KrakenSolverArg('pose',             'out', 'Mat44[]'));
    args.push(KrakenSolverArg('strandEnd',        'out', 'Mat44[]'));

    return args;
}

function SpringStrandSolver.solve!(
                        in  Boolean drawDebug,
                        in  Scalar  rigScale,

                        in  Scalar time,
                        in  Scalar ikblend,
                        //in  Scalar simulationWeight,
                        in  Mat44  chainBase[],
                        in  Mat44  ikgoal[],
                        in  Mat44  fkcontrols[],
                        in  Scalar tipBoneLen,

                        io  Mat44  pose[],
                        io  Mat44  strandEnd[]  ){

    if ( !this.IsReady() ){
        this.initialize( fkcontrols, ikgoal );
        return;
    }

    this.env.UpdateFrame( time );
    Float32 dt = this.env.getDeltaTime();
    //if( dt == 0.0 ){ return; }


    // FIXME: for dev
    if ( this.forces.size() == 0 ){
        this.setupForcesForDebug();
    }

    this.calculateBasePose( fkcontrols );

    Mat44 rootMats[];
    for ( Index i=0; i < this.numberOfStrands; i++ ) {
        rootMats.push( fkcontrols[i * this.numberOfEdges] );
    }

    if ( this.env.isStartFrame() ) {
        this.ResetToReferencePose();
        // TODO: later
    } else if(  dt <= 0.0 ){
        // pass
    } else {
        if ( this.integrateMethod ==  0 ){
            this.solveBasicVerlet( dt );
        } else if ( this.integrateMethod == 1 ){
            this.solveVelocityVerlet( dt );
        }

        this.pinnedOnController( rootMats );
        for (Index i=0; i < 16; i++){
            this.satisfyInternalConstraints();
            for (Index j=0; j < this.collisionMeshs.size(); j++){
                this.UpdateExternalConstraints( this.collisionMeshs[j], 0.05, 3 );
            }
        }
        this.pinnedOnController( rootMats );

        //this.recalculateVelocity( dt );
    }

    this.solveTransform( pose, strandEnd );
    this.setOutputs( pose, strandEnd );

    if(drawDebug) {
        Color boneColor(1.0, 1.0, 0);
        Index count = 0;
        for (UInt32 i=0; i < this.numberOfStrands; i++ ){
            for(UInt32 j=0; j<this.numberOfEdges; j++){
                Scalar boneLength = this.chainLengths[i][j];
                etDrawBone(this.handle.rootTransform, 'bone'+count, pose[count], boneLength, boneLength * 0.045, boneColor);
                count++;
            }
        }
    }
}

function SpringStrandSolver.solveTransform!( io Mat44 pose[], io Mat44 ends[] ){
    Vec3 positions[];
    positions.resize( this.size() );

    for ( Index i=0; i < this.numberOfStrands; i++ ) {

        // first, position
        for ( Index j=0; j < this.numberOfVertices; j++){
            positions[j]    = this.getPosition( this.innerIndices[i][j] );
            this.xfos[i][j] = positions[j];
        }

        // second, rotate
        SpringStrandSolver_solveRotation<<<this.numberOfEdges>>>( positions, this.xfos[i], this.numberOfEdges );
    }
}

operator SpringStrandSolver_solveRotation<<<index>>>(
                                in Vec3    positions[],
                                io Xfo     xfos[],
                                in Integer max
                            ){
    Vec3 tail_pos;
    Vec3 new_dir;

    tail_pos = positions[ index+1 ];
    new_dir = tail_pos - positions[ index ];

    // x axis point its tip
    new_dir.setUnit();
    Quat rot = Quat( Euler( 0, -HALF_PI, 0 , RotationOrder( 'xyz' )) );
    xfos[index].ori.setFromDirectionAndUpvector( new_dir, Vec3(0, 0, 1) );
    xfos[index].ori *= rot;
}

function SpringStrandSolver.setOutputs?( io Mat44 pose[], io Mat44 ends[] ){
    Index count = 0;
    for ( Index i=0; i < this.numberOfStrands; i++ ) {
        for ( Index j=0; j < this.numberOfEdges; j++){
            pose[count] = this.xfos[i][j].toMat44();
            count++;
        }

        ends[i]  = this.xfos[i][this.numberOfVertices-1].toMat44();
    }
}

////////////////////////////////////////////////////////////////////////////////////////
/// 
function SpringStrandSolver.calculateBasePose!( in Mat44 fkcontrols[] ){
    Scalar ikblend = 0.0;

    Xfo   fkPose[][];
    Mat44 controls[][];
    fkPose.resize( this.numberOfStrands );
    controls.resize( this.numberOfStrands );

    // TODO: validation
    //if(fkcontrols.size() != pose.size){
    //    throw("Error in TentacleSolver. The number of FKControls does not match the number of joints");
    // }

    // map
    /*
    for ( Index i=0; i < this.numberOfStrands; i++ ) {
        fkPose[i].resize( this.numberOfVertices );
        controls[i].resize( this.numberOfEdges );

        for ( Index j=0; j < this.numberOfEdges; j++ ){
            controls[i][j] = fkcontrols[ i*this.numberOfEdges + j ];
        }
    }
    // reduce
    SpringStrandSolver_solveFK<<< this.numberOfStrands >>>( fkPose, controls );


    // apply
    for ( Index i=0; i < this.numberOfStrands; i++ ) {
        for( Index j=0; j < this.numberOfVertices; j++ ){
            this.basePose[ this.innerIndices[i][j] ] = fkPose[i][j].tr;
        }
    }
    // */
    for ( Index i=0; i < this.numberOfStrands; i++ ) {
        for( Index j=0; j < this.numberOfEdges; j++ ){
            this.basePose[ this.innerIndices[i][j] ] = fkcontrols[ i*this.numberOfEdges + j ].translation();
        }
        Index last = (i+1)*this.numberOfEdges - 1;
        Vec3 len = Vec3( this.chainLengths[i][ this.numberOfEdges - 2 ], 0.0, 0.0);
        Vec3 t = Xfo(fkcontrols[ last ]).transformVector( len );
        this.basePose[ this.innerIndices[i][ this.numberOfVertices -1 ] ] = t;
    }

    /*
    if( ikblend > 0.0 ){
        Xfo  ikpose[][];
        Xfo  basePose[][];
        Vec3 goalPosition[];
        ikpose.resize( this.numberOfStrands );
        basePose.resize( this.numberOfStrands );
        goalPosition.resize( this.numberOfStrands );
        //for ( Index i=0; i < this.numberOfStrands; i++ ) {
    }
    */

}

/// solve a one strand FK
operator SpringStrandSolver_solveFK<<<index>>>(
                                    io Xfo   xfoPose[][],
                                    in Mat44 controls[][] ){

    Size numCtrls = controls[index].size();
    Vec3 boneVectors[];
    boneVectors.resize(numCtrls);

    for(UInt32 i=0; i < numCtrls; i++) {

        Xfo xfo( controls[index][i] );
        Xfo localXfo = xfo;

        if(i>0){
            Xfo parentInv = Xfo(controls[index][i-1]).inverse();
            localXfo = parentInv * xfo;
            boneVectors[i-1] = localXfo.tr;
        }

        if(i>0){
            xfoPose[index][i] = xfoPose[index][i-1] * localXfo;
        }else{
            xfoPose[index][i] = localXfo;
        }
    }

    Scalar tipBoneLen = 1.0;
    boneVectors[boneVectors.size()-1] = Vec3(tipBoneLen, 0.0, 0.0);
    xfoPose[index][numCtrls]    = xfoPose[index][numCtrls-1];
    xfoPose[index][numCtrls].tr = xfoPose[index][numCtrls-1].transformVector(boneVectors[boneVectors.size()-1]);
}


////////////////////////////////////////////////////////////////////////////////////////


function SpringStrandSolver.addConstraints!(){
    // column
    for (Index j=0; j < this.numberOfStrands; j++ ){
        for (Index i=1; i < this.numberOfVertices; i++) {

            if ( this.chainLengths[j].size() < i ){
                    setError( 'hogeeeeee' );
                return;
            }

            /*
            this.distanceConstraints.push(
                    DistanceConstraint( this.masses[
            // */
            //*
            this.addConstraint(
                this.innerIndices[j][i],
                ParticleConstraint( this.innerIndices[j][i-1], this.chainLengths[j][i-1] ));
            // */
        }
    }

    /* row
    for (Index j=0; j < this.numberOfStrands - 1; j++ ){
        for (Index i=1; i < this.xfos[j]; i++) {
            Scalar dist = (this.ps[ this.innerIndices[j+1][i] ].position - this.ps[ this.innerIndices[j][i] ].position ).length();
            this.addConstraint(
                this.innerIndices[j][i],
                ParticleConstraint( this.innerIndices[j+1][i], dist ));
        }
    }
    // 
        for (Index i=1; i < this.xfos[0]; i++) {
            Scalar dist = (this.ps[ this.innerIndices[0][i] ].position - this.ps[ this.innerIndices[this.bones.size()-1][i] ].position ).length();
            this.addConstraint(
                this.innerIndices[this.bones.size()-1][i],
                ParticleConstraint( this.innerIndices[0][i], dist ));
        }
    */
}


function SpringStrandSolver.satisfyInternalConstraints!(){
    SpringStrandSolver_satisfyInternalConstraints<<< this.constrainRefIndex.size()@GPU_ENABLE >>>(
                                    this.simulatedPos,
                                    this.velocity,
                                    this.env.getDeltaTime(),
                                    this.constrainRefIndex,
                                    this.constrainDistance,
                                    this.cutOffForceDistance );
}

operator SpringStrandSolver_satisfyInternalConstraints<<<index>>>(
                                                io Vec3    positions[],
                                                io Vec3    velocity[],
                                                in Float32 dt,
                                                in Index   refs[][],
                                                in Float32 dist[][],
                                                in Float32 cutoff
                                                ){

    for( Index i=0; i < refs[index].size(); i++ ){
        Vec3 dv = positions[index] - positions[ refs[index][i] ];
        Float32 d1 = dv.length();

        if ( d1 < cutoff ){
            return;
        }

        Float32 d2 = 0.0f;
        if( !isZero( d1 ) ){
            d2 = 0.5 * (d1 - dist[index][i]) / d1;
        }

        Vec3 dp = dv * d2;
        // TODO: ratio by mass
        positions[ index ]          -= dp * 0.5;
        positions[ refs[index][i] ] += dp * 0.5;
        velocity[ index ]           -= dp * 0.5 / dt;
        velocity[ refs[index][i] ]  += dp * 0.5 / dt;
    }
}


function SpringStrandSolver.pinnedOnController!( in Mat44 ctrl[] ){
    if( GPU_ENABLE ){
        Vec3 tmp[];
        Index ids[];
        tmp.convertToSVM();
        ids.convertToSVM();
        for ( Index i=0; i < this.numberOfStrands; i++ ) {
            tmp.push( ctrl[i].translation() );
            ids.push( this.innerIndices[i][0] );
        }
        SpringStrandSolver_pinnedOnController<<<this.numberOfStrands@true>>>(
                                this.simulatedPos, tmp, ids );

    } else {
        for ( Index i=0; i < this.numberOfStrands; i++ ) {
            this.simulatedPos[ this.innerIndices[i][0] ] = ctrl[i].translation();
            this.velocity[ this.innerIndices[i][0] ]     = Vec3();
        }
    }
}

operator SpringStrandSolver_pinnedOnController<<<index>>>( io Vec3 res[], in Vec3 ctrl[], in Index indices[] ){
    res[indices[index]] = ctrl[index];
}


function String SpringStrandSolver.GetName() {
    return this.name;
}

function Boolean SpringStrandSolver.IsReady(){
    return this.ready;
}

function SpringStrandSolver.Finalize!(){
    this.ready = true;
}


function SpringStrandSolver.DrawSolver!() {
}

function String SpringStrandSolver.getInlineNodeName(){
    return "SpringStrandSolverInline_";
}

// Generates a set of inline shapes nested under the provided rootTransform. 
function SpringStrandSolver.draw!(){
    GeometryAttributes  attrs = this.getAttributes();
    Ref<ColorAttribute>  vCol = attrs.getOrCreateColorAttribute( "vertexColors" );
    Ref<ScalarAttribute> fric = attrs.getOrCreateScalarAttribute( "friction" );

    // update vertex color
    for( Index i=0; i < this.size(); i++ ){
        /*
        if( this.dynamicFriction.values[i] != 1.0 ){
            vCol.values[ i ] = Color( fric.values[i], 1.0, 1.0 );
        } else {
            vCol.values[ i ] = Color( fric.values[i], 0.1, 0.1 );
        }
        */
        vCol.values[ i ] = Color( 0.0, 1.0, 1.0 );
    }
    vCol.incrementVersion();


    /* TODO: switch to use fabric's drawer
    // prepare inline drawing
    InlineDrawing   drawing   = this.handle.getDrawing();
    InlineTransform transform = this.handle.getRootTransform().getChild( this.getInlineNodeName() );
    InlineShader    shader    = drawing.registerShader(OGLFlatVertexColorShader());
    InlineMaterial  mat       = shader.getOrCreateMaterial("vertexColors");

    // initialize
    if( transform == null){
        transform = StaticInlineTransform( this.getInlineNodeName(), Xfo() );
        this.handle.getRootTransform().addChild( transform );
        InlineShape shape = drawing.registerShape( InlinePointsShape( this.getInlineNodeName(), this ));
        InlineInstance instance =  mat.addInstance( InlineInstance(
                        this.getInlineNodeName(), transform, shape, mat));
    }
    */

    this.incrementPositionsVersion();
}

function SpringStrandSolver.setupForcesForDebug!(){
    this.forces.push( Gravity( this.env, Vec3(0, -98.0f, 0) ) );
    //this.forces.push( Wind( this.env, Vec3( 0, 0, -1), 5.5 ) );
    this.forces.push( Spring( this.env, this.basePose, this, 10.0f ) );
    this.forces.push( DragResilienceForce( this.env, this, 33.0f ) );

    // stiff
    Ref<GeometryAttributes> attributes = this.getAttributes();
    Ref<ScalarAttribute> stiffness = attributes.getOrCreateScalarAttribute( "stiffness" );

    for ( Index i=0; i < this.numberOfStrands; i++ ) {
        for( Index j=0; j < this.numberOfVertices; j++ ){
            Float32 ratio = j*1.0f / this.numberOfVertices * 1.0f;
            Float32 power = 10.1 - (ratio * ratio * 10);
            Index id = this.innerIndices[i][j];
            stiffness.values[ id ] =  power;
            //report( "["+i+"]["+j+"] ("+id+") pow" + power + "    " + (j+1) + "  " + this.numberOfVertices );
        }
    }

    // drag resi
    Ref<ScalarAttribute> resilience = attributes.getOrCreateScalarAttribute( "resilience" );

    for ( Index i=0; i < this.numberOfStrands; i++ ) {
        for( Index j=0; j < this.numberOfVertices; j++ ){
            Float32 ratio = j*1.0f / this.numberOfVertices * 1.0f;
            //Float32 power = 100.0f;
            Float32 power = 10.0f - ( 70.289*( pow(ratio, 4) ) - 185.85*( pow(ratio, 3) ) + 176.11*( pow(ratio, 2) ) - 70.47*( ratio ) + 9.999);
            Index id = this.innerIndices[i][j];
            resilience.values[ id ] = power;
            report( "["+i+"]["+j+"] ("+ratio+") pow" + power);
        }
    }
}
